Detected language: Scala
Generated code:
def andThenDemo[A, B, C](f: A => B, g: B => C): A => C =
  g.compose(f)

Detected language: Java
Generated code:
<A, B, C, D> BiFunction<A, D, C> foo(Function<A, B> f, Function<B, C> g) {
    return (a, d) -> {
        return g.apply(f.apply(a));
    };
}

Detected language: Java
Generated code:
Function<String, Integer> boxTypesDemo(
    Function<String, Float> f,
    Function<Float, Integer> g
) {
    return s -> g.apply(f.apply(s));
}

Detected language: Scala
Generated code:
def toInt: (String => Int) => (Float => Int) => Either[String, Float] => Int =
  f => g => {
    case Left(s) => f(s)
    case Right(h) => g(h)
  }

Detected language: Haskell
Generated code:
foo :: (b -> c) -> (a -> b) -> a -> c
foo f g a = f (g a)

Detected language: Haskell
Generated code:
bar :: (a -> c) -> (b -> c) -> Either a b -> c
bar f g e = case e of
  Left a -> f a
  Right b -> g b

Detected language: Python
Generated code:
def de(
    f: Callable[[float], int],
    g: Callable[[str], int]
) -> Callable[[Union[float, str]], int]:
    return lambda e: f(e) if type(e) is float else g(e)

Detected language: Python
Generated code:
def foo(f: Callable[[A], Tuple[C, B]], a: A) -> C:
    return f(a)[0]