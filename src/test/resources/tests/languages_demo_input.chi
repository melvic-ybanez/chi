// a basic scala example to show function composition
def andThenDemo[A, B, C](f: A => B, g: B => C): A => C

// Java syntax is supported too!
<A, B, C, D> BiFunction<A, D, C> foo(Function<A, B> f, Function<B, C> g)

// Demo for `Predef.identity`
def myApply: String => Int => Int

// Shows support for Java's standard boxed types
Function<String, Integer> boxTypesDemo(
	Function<String, Float> f,
	Function<Float, Integer> g
)

// Disjunction Elimination for some of Scala's built-in types
def toInt: (String => Int) => (Float => Int) => Either[String, Float] => Int

// Haskell syntax is now supported!
foo :: (b -> c) -> (a -> b) -> a -> c

// More Haskell
bar :: (a, b) -> b
foo :: (a -> c) -> (b -> c) -> Either a b -> c



